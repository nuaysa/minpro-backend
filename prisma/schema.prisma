generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum EventsCategory {
  seminar
  business
  entertainments
  food
}

enum ticket_type {
  paid
  free
}

enum Locations {
  Bandung
  Jakarta
  Bogor
  Depok
  Tanggerang
  Bekasi
}

enum transactionStatus {
  pending
  paid
  canceled
}

model User {
  id               String             @id @default(uuid())
  username         String             @unique
  email            String             @unique
  password         String             @unique
  avatar           String             @default("")
  isVerify         Boolean            @default(false)
  ref_code         String             @default("")
  userPoints       User_Point[]
  Referral_Voucher Referral_Voucher[]
  review           review[]
}

model Promotor {
  id       String   @id @default(uuid())
  name     String   @unique
  email    String   @unique
  password String   @unique
  avatar   String   @default("")
  isVerify Boolean  @default(false)
  event    Events[]
}

model User_Point {
  id         Int      @id @default(autoincrement())
  points     Int      @default(1000)
  created_at DateTime @default(now())
  expires_at DateTime
  User_Id    String
  user       User     @relation(fields: [User_Id], references: [id])
}

model Referral_Voucher {
  id         Int      @id @default(autoincrement())
  User_Id    String
  created_at DateTime @default(now())
  user       User     @relation(fields: [User_Id], references: [id])
}

model Venue {
  name    String   @unique
  Map_URL String   @unique
  events  Events[]
}

model Events {
  id                 Int                  @id @default(autoincrement())
  title              String               @unique
  slug               String               @unique
  description        String               @unique
  category           EventsCategory
  location           Locations
  venue_name         String
  date               DateTime
  time               DateTime
  type               ticket_type          @default(free)
  promotor_id        String
  promotor           Promotor             @relation(fields: [promotor_id], references: [id])
  venue              Venue                @relation(fields: [venue_name], references: [name])
  detail_transaction Detail_transaction[]
  review             review[]

  @@index([title, category, location])
}

model Detail_transaction {
  id             Int         @id @default(autoincrement())
  ticket_Id      Int
  transaction_Id Int
  event_Id       Int         @unique
  qty            Int         @default(1)
  payment_proof  String      @unique
  event          Events      @relation(fields: [event_Id], references: [id])
  transaction    Transaction @relation(fields: [transaction_Id], references: [id])
}

model Transaction {
  id                 Int                  @id @default(autoincrement())
  total_price        Int
  final_price        Int
  status             transactionStatus    @default(pending)
  user_id            String
  detail_transaction Detail_transaction[]
}

model review {
  id       Int    @id @default(autoincrement())
  desc     String
  rating   Int
  user_Id  String
  event_Id Int
  event    Events @relation(fields: [event_Id], references: [id])
  user     User   @relation(fields: [user_Id], references: [id])
}
